# SPDX-FileCopyrightText: 2022 - 2023, 2025 Chris Rizzitello <sithlord48@gmail.com>
# SPDX-License-Identifier: MIT

include (CPackIFW)

##Cpack Deployment Info
#Generate list of built Targets
option(SPLITPACKAGES "build split packages" OFF)
set(RUNTIME_DEPENDS_PATH ${CMAKE_BINARY_DIR}/runtime_depends)

get_property( TARGETS GLOBAL PROPERTY ff7tk_targets)
set(TARGET_FILES "")
foreach (_target ${TARGETS})
    list(APPEND TARGET_FILES "${CMAKE_BINARY_DIR}/target-temp/${_target}.cmake")
    file(GENERATE OUTPUT ${CMAKE_BINARY_DIR}/target-temp/${_target}.cmake CONTENT $<TARGET_FILE:${_target}>)
endforeach()

get_property( ZLIB_TARGET GLOBAL PROPERTY zlib_target)

#Generic Info
set(CPACK_PACKAGE_CONTACT "sithlord48@gmail.com")
set(CPACK_STRIP_FILES TRUE)
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING.TXT")
set(CPACK_PACKAGE_NAME "ff7tk")
set(CPACK_PACKAGE_VENDOR "sithlord48")
set(CPACK_PACKAGE_HOMEPAGE_URL "https://github.com/sithlord48/ff7tk")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${CMAKE_PROJECT_DESCRIPTION})

set(CPACK_PACKAGE_VERSION ${CMAKE_PROJECT_VERSION})

if(NOT PACKAGE_VERSION_LABEL)
    set (PACKAGE_VERSION_LABEL "${CPACK_PACKAGE_VERSION}")
endif()

#Set base Generator Based on the system
if(CMAKE_SYSTEM_NAME MATCHES "Darwin")
    set(CPACK_GENERATOR "ZIP")
elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(CPACK_GENERATOR "7Z")
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(CPACK_GENERATOR "TGZ")
endif()

## SET OS NAME
include(${CMAKE_SOURCE_DIR}/cmake/ff7tkMacros.cmake)
SET_OS_INFO()

set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${PACKAGE_VERSION_LABEL}-${OS_STRING}")

set(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION})
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING.TXT")

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/preBuildCPack.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/preBuildCPack.cmake @ONLY)
set(CPACK_PRE_BUILD_SCRIPTS ${CMAKE_CURRENT_BINARY_DIR}/preBuildCPack.cmake)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cpackOptions.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/cpackOptions.cmake @ONLY)
set(CPACK_PROJECT_CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/cpackOptions.cmake)

set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY OFF)

#components
cpack_add_component(ff7tk_libraries REQUIRED
    DISPLAY_NAME "Libraries"
    DESCRIPTION "ff7tk libraries"
)

set(CPACK_COMPONENT_FF7TK_I18N_DISPLAY_NAME "Translations")
set(CPACK_COMPONENT_FF7TK_I18N_DESCRIPTION "ff7tk Translation files")
set(CPACK_COMPONENT_FF7TK_I18N_DEPENDS ff7tk_libraries)
set(CPACK_COMPONENT_FF7TK_I18N_DISABLED FALSE)


set(CPACK_COMPONENT_FF7TK_HEADERS_DISPLAY_NAME "Headers")
set(CPACK_COMPONENT_FF7TK_HEADERS_DESCRIPTION "ff7tk Headers and cmake files")
set(CPACK_COMPONENT_FF7TK_HEADERS_DEPENDS ff7tk_libraries)
set(CPACK_COMPONENT_FF7TK_HEADERS_DISABLED FALSE)

cpack_add_component(ff7tk_docs COMMON
    DISPLAY_NAME "Documentation"
    DESCRIPTION "Documentation for ff7tk"
)
cpack_add_component(ff7tk_docs COMMON
    DISPLAY_NAME "Documentation"
    DESCRIPTION "Documentation for ff7tk"
)

cpack_add_component(ff7tk_debug COMMON
    DISPLAY_NAME "Debug"
    DESCRIPTION "Debugging symbols for ff7tk"
    DEPENDS ff7tk_libraries
)

cpack_add_component_group(ff7tk_demos EXPANDED
    DISPLAY_NAME "Demos"
    DESCRIPTION "Demo applicaions using ff7tk"
    DEPENDS ff7tk_libraries
)

cpack_add_component(ff7tkWidgetGallery COMMON
    DISPLAY_NAME "DemoApp: Widget Gallery"
    DESCRIPTION "A Demo Application using ff7tk's widgets"
    DEPENDS ff7tk_libraries
    GROUP ff7tk_demos
)

cpack_add_component(ff7tkQmlGallery COMMON
    DISPLAY_NAME "DemoApp: Qml Gallery"
    DESCRIPTION "A Demo Application using ff7tk's Qml Components"
    DEPENDS ff7tk_libraries
    GROUP ff7tk_demos
)

#IFW
set(CPACK_IFW_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
set(CPACK_IFW_PACKAGE_TITLE "${CPACK_PACKAGE_NAME} Installer")
set(CPACK_IFW_PACKAGE_PUBLISHER ${CPACK_PACKAGE_CONTACT})
set(CPACK_IFW_PACKAGE_WIZARD_SHOW_PAGE_LIST OFF)
set(CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_NAME ff7tk-install-tool)
set(CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_INI_FILE ff7tk-install-tool.ini)
if(WIN32)
    set(CPACK_IFW_PACKAGE_ICON ${CMAKE_CURRENT_SOURCE_DIR}/ff7tk_installer.ico)
elseif(APPLE)
    set(CPACK_IFW_PACKAGE_ICON ${CMAKE_CURRENT_SOURCE_DIR}/ff7tk_installer.icns)
endif()

set(CPACK_IFW_PACKAGE_WINDOW_ICON ${CMAKE_CURRENT_SOURCE_DIR}/ff7tk_installer.png)

cpack_ifw_configure_component(ff7tk_libraries FORCED_INSTALLATION  SORTING_PRIORITY 100)
cpack_ifw_configure_component_group(ff7tk_i18n DEFAULT TRUE SORTING_PRIORITY 1)
cpack_ifw_configure_component_group(ff7tk_demos DEFAULT TRUE SORTING_PRIORITY 2)

# DEBIAN
#set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)
set(CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION TRUE)
set(DEBIAN_DEPENDS_STRING "libqt6widgets6 (>= ${REQUIRED_QT_VERSION}),libqt6qml6 (>= ${REQUIRED_QT_VERSION}), libqt6xml6 (>= ${REQUIRED_QT_VERSION}),libqt6gui6 (>= ${REQUIRED_QT_VERSION}), libqt6svg6 (>= ${REQUIRED_QT_VERSION}) ,libqt6core5compat6 (>= ${REQUIRED_QT_VERSION}),libqt6core6 (>= ${REQUIRED_QT_VERSION}),libqt6network6 (>= ${REQUIRED_QT_VERSION}), qt6-qpa-plugins, zlib1g")
if(SPLITPACKAGES)
    set(CPACK_DEB_COMPONENT_INSTALL TRUE)
    set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS FALSE)
    set(CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS YES)
    set(CPACK_DEBIAN_FF7TK_LIBRARIES_PACKAGE_NAME libff7tk)
    set(CPACK_DEBIAN_FF7TK_LIBRARIES_PACKAGE_PROVIDES libff7tk)
    set(CPACK_DEBIAN_FF7TK_LIBRARIES_PACKAGE_DEPENDS ${DEBIAN_DEPENDS_STRING})
    set(CPACK_DEBIAN_FF7TK_LIBRARIES_AUTO_PACKAGE_SHLIBDEPS ON)
    set(CPACK_DEBIAN_FF7TK_LIBRARIES_PACKAGE_CONFLICTS libff7tk-all)
    set(CPACK_DEBIAN_FF7TK_I18N_PACKAGE_NAME libff7tk-i18n)
    set(CPACK_DEBIAN_FF7TK_I18N_PACKAGE_PROVIDES libff7tk-i18n)
    set(CPACK_DEBIAN_FF7TK_I18N_PACKAGE_DEPENDS "libff7tk (= ${CPACK_PACKAGE_VERSION})")
    set(CPACK_DEBIAN_FF7TK_I18N_AUTO_PACKAGE_SHLIBDEPS ON)
    set(CPACK_DEBIAN_FF7TK_I18N_PACKAGE_ENHANCES libff7tk)
    set(CPACK_DEBIAN_FF7TK_I18N_PACKAGE_CONFLICTS libff7tk-all)
    set(CPACK_DEBIAN_FF7TK_HEADERS_PACKAGE_NAME libff7tk-dev)
    set(CPACK_DEBIAN_FF7TK_HEADERS_PACKAGE_PROVIDES libff7tk-dev)
    set(CPACK_DEBIAN_FF7TK_HEADERS_PACKAGE_ENHANCES libff7tk)
    set(CPACK_DEBIAN_FF7TK_HEADERS_PACKAGE_CONFLICTS libff7tk-all)
    set(CPACK_DEBIAN_FF7TK_HEADERS_PACKAGE_DEPENDS "libff7tk (= ${CPACK_PACKAGE_VERSION})")
    set(CPACK_DEBIAN_FF7TK_HEADERS_AUTO_PACKAGE_SHLIBDEPS ON)
    set(CPACK_DEBIAN_FF7TK_DEBUG_PACKAGE_NAME libff7tk-dbg)
    set(CPACK_DEBIAN_FF7TK_DEBUG_PACKAGE_PROVIDES libff7tk-dbg)
    set(CPACK_DEBIAN_FF7TK_DEBUG_PACKAGE_ENHANCES libff7tk)
    set(CPACK_DEBIAN_FF7TK_DEBUG_PACKAGE_CONFLICTS libff7tk-all)
    set(CPACK_DEBIAN_FF7TK_DEBUG_PACKAGE_DEPENDS "libff7tk (= ${CPACK_PACKAGE_VERSION})")
    set(CPACK_DEBIAN_FF7TK_DEBUG_AUTO_PACKAGE_SHLIBDEPS ON)
    set(CPACK_DEBIAN_FF7TK_DEMOS_PACKAGE_NAME libff7tk-demos)
    set(CPACK_DEBIAN_FF7TK_DEMOS_PACKAGE_PROVIDES libff7tk-demos)
    set(CPACK_DEBIAN_FF7TK_DEMOS_PACKAGE_DEPENDS "libff7tk (= ${CPACK_PACKAGE_VERSION})")
    set(CPACK_DEBIAN_FF7TK_DEMOS_PACKAGE_CONFLICTS libff7tk-all)
    set(CPACK_DEBIAN_FF7TK_DEMOS_AUTO_PACKAGE_SHLIBDEPS ON)
    set(CPACK_DEBIAN_FF7TK_DOCS_PACKAGE_NAME libff7tk-doc)
    set(CPACK_DEBIAN_FF7TK_DOCS_PACKAGE_PROVIDES libff7tk-doc)
    set(CPACK_DEBIAN_FF7TK_DOCS_PACKAGE_ENHANCES libff7tk)
    set(CPACK_DEBIAN_FF7TK_DOCS_PACKAGE_ARCHITECTURE all)
    set(CPACK_DEBIAN_FF7TK_DOCS_PACKAGE_CONFLICTS libff7tk-all)
else ()
    set(CPACK_DEBIAN_PACKAGE_DEPENDS ${DEBIAN_DEPENDS_STRING})
    set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
    set(CPACK_DEBIAN_PACKAGE_NAME libff7tk-all)
    set(CPACK_DEBIAN_PACKAGE_PROVIDES libff7tk-all)
    set(CPACK_DEBIAN_PACKAGE_CONFLICTS "libff7tk, libff7tk-dev, libff7tk-demos, libff7tk-docs, libff7tk-dbg, libff7tk-i18n")
    set(CPACK_DEBIAN_PACKAGE_REPLACES "libff7tk, libff7tk-dev, libff7tk-demos, libff7tk-docs, libff7tk-dbg, libff7tk-i18n")
endif()

# RPM
set(CPACK_RPM_PACKAGE_NAME libff7tk)
set(CPACK_RPM_FILE_NAME RPM-DEFAULT)
if(SPLITPACKAGES)
    set(CPACK_RPM_COMPONENT_INSTALL TRUE)
    set(CPACK_RPM_FF7TK_LIBRARIES_PACKAGE_NAME libff7tk)
    set(CPACK_RPM_FF7TK_I18N_PACKAGE_NAME libff7tk-i18n)
    set(CPACK_RPM_FF7TK_I18N_PACKAGE_PROVIDES libff7tk-i18n)
    set(CPACK_RPM_FF7TK_HEADERS_PACKAGE_NAME libff7tk-dev)
    set(CPACK_RPM_FF7TK_HEADERS_PACKAGE_PROVIDES libff7tk-dev)
    set(CPACK_RPM_FF7TK_DEBUG_PACKAGE_NAME libff7tk-dbg)
    set(CPACK_RPM_FF7TK_DEBUG_PACKAGE_PROVIDES libff7tk-dbg)
    set(CPACK_RPM_FF7TK_DEMOS_PACKAGE_NAME libff7tk-demos)
    set(CPACK_RPM_FF7TK_DEMOS_PACKAGE_PROVIDES libff7tk-demos)
    set(CPACK_RPM_FF7TK_DOCS_PACKAGE_NAME libff7tk-doc)
    set(CPACK_RPM_FF7TK_DOCS_PACKAGE_PROVIDES libff7tk-doc)
    set(CPACK_RPM_FF7TK_DOCS_PACKAGE_ARCHITECTURE noarch)
endif()

#WIX
set(CPACK_WIX_UPGRADE_GUID "56266AAA-FE44-4473-90FD-122755D1682A")
set(CPACK_WIX_PRODUCT_GUID "DAF12CAD-2518-439C-B70A-2E3FADAE0F50")
set(CPACK_WIX_PROPERTY_ARPCOMMENTS ${CPACK_PACKAGE_DESCRIPTION_SUMMARY})
set(CPACK_WIX_PROPERTY_ARPURLUPDATEINFO "http://github.com/sithlord48/ff7tk/releases")

if (CPACK_IFW_FRAMEWORK_VERSION)
    list(APPEND CPACK_GENERATOR "IFW")
    list(APPEND CPACK_PACKAGE_EXECUTABLES "ff7tk-install-tool;Modify ff7tk Install")
endif()

#Source Package
set(CPACK_SOURCE_IGNORE_FILES "build" .directory .git* )
set(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-src")
set(CPACK_SOURCE_GENERATOR "TGZ;ZIP")

if(WIN32)
    install(
        DIRECTORY ${RUNTIME_DEPENDS_PATH}/
        DESTINATION ${CMAKE_INSTALL_BINDIR}
        COMPONENT ff7tk_depends
    )

    set(CPACK_COMPONENT_FF7TK_DEPENDS_HIDDEN TRUE)
    set(CPACK_COMPONENT_FF7TK_DEPENDS_REQUIRED TRUE)

endif()

include(CPackIFW)
cpack_ifw_configure_component(ff7tk_depends VIRTUAL FORCED_INSTALLATION)

get_cmake_property(CPACK_COMPONENTS_ALL COMPONENTS)
list(FIND CPACK_COMPONENTS_ALL "ff7tk_headers" hasDev)
if (${hasDev} EQUAL -1)
    list(PREPEND CPACK_COMPONENTS_ALL "ff7tk_headers")
endif()
list(FIND CPACK_COMPONENTS_ALL "ff7tk_debug" hasDbg)
if (${hasDbg} EQUAL -1)
    list(PREPEND CPACK_COMPONENTS_ALL "ff7tk_debug")
endif()
include(CPack)
