name: CI/CD
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  QtVersion: 6.3.0
  QtTools: 'desktop,tools_ifw,qt.tools.ifw.43'
  QtKey: "6.3.0-ifw_43"
  BuildType: RelWithDebInfo
  ff7tkVersion: continuous

jobs:
  main_build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
           name: "Linux-amd64"
           , os: ubuntu-20.04
           , QT_INST_DIR: /opt, Qt_TOOL_PATH: "/opt/Qt/Tools/QtInstallerFramework/4.3"
           , packageName: "ff7tk-continuous-linux-amd64"
          }
        - {
            name: "MacOS-amd64"
            , os: macos-10.15
            , QT_INST_DIR: /Users/runner, Qt_TOOL_PATH: "/Users/runner/Qt/Tools/QtInstallerFramework/4.3"
          }
        - {
            name: "Windows-x64"
            , os: windows-2019
            , QT_INST_DIR: "C:", Qt_TOOL_PATH: "C:/Qt/Tools/QtInstallerFramework/4.3"
            , extraCmakeConfig: "-DZLIB_ROOT=C:/zlib -G Ninja"
          }

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - run: git fetch --tags --force
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{matrix.config.QT_INST_DIR}}/Qt
        key: ${{ runner.os }}${{ matrix.config.WIN_ARCH }}-qt-${{ env.QtKey }}

    - name: Cache Zlib
      id: cache-zlib
      if: runner.os == 'Windows'
      uses: actions/cache@v2
      with:
        path: |
          C:/zlib
          D:/a/ff7tk/ff7tk/build/src/utils/zlib.dll
        key: ${{ runner.os }}${{ matrix.config.WIN_ARCH }}-zlib2

    - name: Cache Chocolatey
      id: cache-choco
      if: (runner.os == 'Windows')
      uses: actions/cache@v2
      with:
        path: |
            C:\ProgramData\chocolatey\lib
            C:\Program Files\doxygen
            C:\Program Files\Graphviz
        key: cache-chocolatey-${{ matrix.config.WIN_ARCH }}${{ hashFiles('**/dependencies.config') }}

    - name: Env Script (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'

    - name: Install Dependencies
      if: ((runner.os == 'Windows') && (steps.cache-choco.outputs.cache-hit != 'true')) || (runner.os != 'Windows')
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update > /dev/null && sudo apt-get install -qqq doxygen graphviz devscripts > /dev/null
        elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install ninja doxygen.install graphviz --ignore-checksums
        else
            brew install doxygen graphviz
        fi

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.14.0
      with:
       aqtversion: ==2.0.0
       py7zrversion: ==0.16.2
       dir: ${{matrix.config.QT_INST_DIR}}
       version: ${{ env.QtVersion }}
       modules: qt5compat
       cached: ${{ steps.cache-qt.outputs.cache-hit }}
       tools: ${{env.QtTools}}

    - name: Install Zlib (Windows)
      if: (runner.os == 'Windows') && (steps.cache-zlib.outputs.cache-hit != 'true')
      run: |
        git clone -q --branch=v1.2.11 https://github.com/madler/zlib ${{github.workspace}}\zlib-git
        cmake -S${{github.workspace}}\zlib-git -B${{github.workspace}}\zlib-git\build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=C:/zlib
        cmake --build ${{github.workspace}}\zlib-git\build --config Release
        cmake --install ${{github.workspace}}\zlib-git\build --strip
        mkdir D:\a\ff7tk\ff7tk\build\src\utils
        copy "C:\zlib\bin\zlib.dll" D:\a\ff7tk\ff7tk\build\src\utils

    - name: Build ff7tk
      id: main_build
      run: |
        cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=${{env.BuildType}} -DBUILD_DEMOS=ON -DCPACK_PACKAGE_VERSION=${{env.ff7tkVersion}} -DQT_DEFAULT_MAJOR_VERSION=6 -DCPACK_IFW_ROOT=${{matrix.config.Qt_TOOL_PATH}} ${{matrix.config.extraCmakeConfig}}
        cmake --build build --config ${{env.BuildType}} --target package

    - name: Deployment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo tar -xf build/ff7tk-*.tar.gz --one-top-level=/usr --exclude COPYING.TXT
        mkdir -p ${{matrix.config.packageName}}/usr ff7tk
        tar -xf build/ff7tk-*.tar.gz -C ${{matrix.config.packageName}}/usr
        cp -r ${{matrix.config.packageName}}/* ff7tk/
        rm -rf ff7tk/usr/bin
        wget -qc "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget -qc "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
        chmod a+x linuxdeploy*.AppImage
        rm -rf ff7tk/usr/share/applications ff7tk/usr/share/pixmaps
        export VERSION=${{env.ff7tkVersion}}
        export PATH=$PATH:${{matrix.config.QT_INST_DIR}}/Qt/${{ env.QtVersion }}/gcc_64/libexec
        ./linuxdeploy-x86_64.AppImage --appdir=widgetGallery --plugin=qt --output appimage \
            -e ${{matrix.config.packageName}}/usr/bin/ff7tkWidgetGallery \
            -d ${{matrix.config.packageName}}/usr/share/applications/ff7tkWidgetGallery.desktop \
            -i ${{matrix.config.packageName}}/usr/share/pixmaps/ff7tkWidgetGallery.png
        export QML_SOURCES_PATHS=demos/ff7tkQmlGallery
        ./linuxdeploy-x86_64.AppImage --appdir=qmlGallery --plugin=qt --output appimage \
            -e ${{matrix.config.packageName}}/usr/bin/ff7tkQmlGallery \
            -d ${{matrix.config.packageName}}/usr/share/applications/ff7tkQmlGallery.desktop \
            -i ${{matrix.config.packageName}}/usr/share/pixmaps/ff7tkQmlGallery.png
        mv ff7tk*.AppImage ${{matrix.config.packageName}}/
        mv ff7tk/usr/COPYING.TXT ${{matrix.config.packageName}}/
        mv ff7tk/ ${{matrix.config.packageName}}
        rm -rf ${{matrix.config.packageName}}/usr
        tar -zcvf build/${{ matrix.config.packageName}}.tar.xz ${{matrix.config.packageName}}

    - name: Deploy Pages
      if: runner.os == 'Linux' && github.ref == 'refs/heads/master'
      uses: JamesIves/github-pages-deploy-action@4.1.4
      with:
       branch: gh-pages
       folder: build/docs/html

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ${{ github.workspace }}/build/ff7tk[-_]*.*

  container_build:
    # The host should always be linux
    runs-on: ubuntu-latest
    name: ${{matrix.config.name}}

    strategy:
      fail-fast: false
      matrix:
        config:
        - {
           name: "Linux-aarch64"
           , arch: aarch64, distro: archarm_latest
          }
        - {
           name: "Linux-armv7"
           , arch: armv7, distro: archarm_latest
           , cmakeExtraConfig: "-DDOCS=OFF"
          }
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git fetch --tags --force
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.config.arch }}
          distro: ${{ matrix.config.distro }}
          githubToken: ${{ github.token }}
          setup: mkdir -p "${PWD}/artifacts"
          dockerRunArgs: --volume "${PWD}/artifacts:/artifacts"
          shell: /bin/sh
          install: |
                pacman -Syu --noconfirm
                pacman -S base-devel cmake git zlib wget doxygen qt6-tools qt6-base qt6-5compat qt6-declarative qt6-svg clang graphviz --noconfirm

          run: |
            cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=${{env.BuildType}} -DBUILD_DEMOS=ON -DCPACK_PACKAGE_VERSION=${{env.ff7tkVersion}} -DQT_DEFAULT_MAJOR_VERSION=6 ${{matrix.config.cmakeExtraConfig}}
            cmake --build build --config ${{env.BuildType}} --target package
            mv build/ff7tk* /artifacts/
            rm /artifacts/ff7tk.pc

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: ff7tk-container-artifact
          path: artifacts/ff7tk[-_]*.*

  release_assets:
    name: Release
    needs: [main_build, container_build]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - name: Download Files
      uses: actions/download-artifact@v2

    - name: Deploy Package
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
       repo_token: "${{ secrets.DEPLOYTOKEN }}"
       automatic_release_tag: "continuous"
       prerelease: false
       title: "Continuous Build"
       files: |
         artifact/*
         ff7tk-container-artifact/*
