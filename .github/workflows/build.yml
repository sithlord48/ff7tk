name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release
  packageGlob: ff7tk-continuous-*.*

jobs:
  main_build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
           name: "Linux-Qt5-amd64"
           , os: ubuntu-18.04
           , QT_VERSION: 5.15.2, QT_INST_DIR: /opt, QTDIR: /opt/Qt/5.15.2/gcc_64
           , install_depends: "sudo apt-get update > /dev/null && sudo apt-get install -qqq doxygen graphviz > /dev/null"
           , extraCmakeConfig: "-DQT_DEFAULT_MAJOR_VERSION=5"
           , packageName: ff7tk-continuous-Qt5-linux
           , ff7tkInstallPrefix: /usr
           , ff7tkTestExport: "export QT_QPA_PLATFORM=minimal"
           , releasePackage: "ff7tk-continuous-Qt5-linux.tar.xz"
          }
        - {
           name: "Linux-Qt6-amd64"
           , os: ubuntu-latest
           , QT_VERSION: 6.2.0, QT_INST_DIR: /opt, QTDIR: /opt/Qt/6.2.0/gcc_64, QT_MODULES: qt5compat
           , install_depends: "sudo apt-get update > /dev/null && sudo apt-get install -qqq doxygen graphviz > /dev/null"
           , extraCmakeConfig: "-DQT_DEFAULT_MAJOR_VERSION=6"
           , packageName: ff7tk-continuous-Qt6-linux
           , ff7tkInstallPrefix: /usr
           , ff7tkTestExport: "export QT_QPA_PLATFORM=minimal"
           , linuxDeployQtPath: "export PATH=$PATH:/opt/Qt/6.2.0/gcc_64/libexec"
           , releasePackage: "ff7tk-continuous-Qt6-linux.tar.xz"
          }
        - {
            name: "MacOS-Qt5-amd64"
            , os: macos-latest
            , QT_VERSION: 5.15.2, QT_INST_DIR: /Users/runner, QTDIR: /Users/runner/Qt/5.15.2/clang_64
            , install_depends: "brew install doxygen graphviz"
            , extraCmakeConfig: "-DQT_DEFAULT_MAJOR_VERSION=5"
            , packageName: ff7tk-continuous-Qt5-macos
            , ff7tkInstallPrefix: ff7tk-continuous-Qt5-macos
            , releasePackage: "ff7tk-continuous-Qt5-macos.zip"
          }
        - {
            name: "MacOS-Qt6-amd64"
            , os: macos-latest
            , QT_VERSION: 6.2.0, QT_INST_DIR: /Users/runner, QTDIR: /Users/runner/Qt/6.2.0/clang_64, QT_MODULES: qt5compat
            , install_depends: "brew install doxygen graphviz"
            , extraCmakeConfig: "-DQT_DEFAULT_MAJOR_VERSION=6"
            , packageName: ff7tk-continuous-Qt6-macos
            , ff7tkInstallPrefix: ff7tk-continuous-Qt6-macos
            , releasePackage: "ff7tk-continuous-Qt6-macos.zip"
          }
        - {
            name: "Windows-Qt5-x64", WIN_ARCH: "x64"
            , os: windows-latest
            , QT_VERSION: 5.15.2, QT_INST_DIR: "C:/", QTDIR: "C:/Qt/5.15.2/msvc2019_64", QT_ARCH: win64_msvc2019_64
            , install_depends: "choco install ninja doxygen.install graphviz"
            , extraCmakeConfig: "-DZLIB_ROOT=C:/zlib -G Ninja -DQT_DEFAULT_MAJOR_VERSION=5"
            , packageName: "ff7tk-continuous-Qt5-win64"
            , ff7tkInstallPrefix: ff7tk-continuous-Qt5-win64
            , releasePackage: "ff7tk-continuous-Qt5-win64.zip"
          }
        - {
            name: "Windows-Qt6-x64", WIN_ARCH: "x64"
            , os: windows-latest
            , QT_VERSION: 6.2.0, QT_INST_DIR: "C:/", QTDIR: "C:/Qt/6.2.0/msvc2019_64", QT_ARCH: win64_msvc2019_64, QT_MODULES: qt5compat
            , install_depends: "choco install ninja doxygen.install graphviz"
            , extraCmakeConfig: "-DZLIB_ROOT=C:/zlib -G Ninja -DQT_DEFAULT_MAJOR_VERSION=6"
            , packageName: "ff7tk-continuous-Qt6-win64"
            , ff7tkInstallPrefix: ff7tk-continuous-Qt6-win64
            , releasePackage: "ff7tk-continuous-Qt6-win64.zip"
          }
        - {
            name: "Windows-Qt5-x86"
            , os: windows-latest, WIN_ARCH: "amd64_x86"
            , QT_VERSION: 5.15.2, QT_INST_DIR: "C:/", QTDIR: "C:/Qt/5.15.2/msvc2019", QT_ARCH: win32_msvc2019
            , install_depends: "choco install ninja doxygen.install graphviz"
            , extraCmakeConfig: "-DZLIB_ROOT=C:/zlib -G Ninja -DQT_DEFAULT_MAJOR_VERSION=5"
            , packageName: "ff7tk-continuous-Qt5-win32"
            , ff7tkInstallPrefix: ff7tk-continuous-Qt5-win32
            , releasePackage: "ff7tk-continuous-Qt5-win32.zip"
          }

    steps:
    - uses: actions/checkout@v2

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{matrix.config.QT_INST_DIR}}/Qt
        key: ${{ runner.os }}${{ matrix.config.WIN_ARCH }}-qt-${{ matrix.config.QT_VERSION }}

    - name: Cache Zlib
      id: cache-zlib
      if: runner.os == 'Windows'
      uses: actions/cache@v2
      with:
        path: C:/zlib
        key: ${{ runner.os }}${{ matrix.config.WIN_ARCH }}-zlib

    - name: Env Script (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      with:
        arch: ${{matrix.config.WIN_ARCH}}

    - name: Install Dependencies
      run: ${{matrix.config.install_depends}}

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.14.0
      with:
       aqtversion: ==2.0.0
       dir: ${{matrix.config.QT_INST_DIR}}
       arch: ${{ matrix.config.QT_ARCH }}
       version: ${{ matrix.config.QT_VERSION }}
       modules: ${{ matrix.config.QT_MODULES }}
       cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Install Zlib (Windows)
      if: (runner.os == 'Windows') && (steps.cache-zlib.outputs.cache-hit != 'true')
      run: |
        git clone -q --branch=v1.2.11 https://github.com/madler/zlib ${{github.workspace}}\zlib-git
        cmake -S${{github.workspace}}\zlib-git -B${{github.workspace}}\zlib-git\build -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=C:/zlib
        cmake --build ${{github.workspace}}\zlib-git\build --config ${{env.BUILD_TYPE}}
        cmake --install ${{github.workspace}}\zlib-git\build --strip

    - name: Build ff7tk
      id: main_build
      run: |
        cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{matrix.config.ff7tkInstallPrefix}} -DWIDGET_GALLERY=ON -DQML_GALLERY=ON -DDOCS=ON ${{matrix.config.extraCmakeConfig}}
        cmake --build build --config ${{env.BUILD_TYPE}} -j8

    - name: Prepare for Unittesting (windows)
      if: runner.os == 'Windows'
      run: copy "C:\zlib\bin\zlib.dll" D:\a\ff7tk\ff7tk\build\src\utils

    - name: Run UnitTests
      run: |
        ${{ matrix.config.ff7tkTestExport }}
        ctest --test-dir build/unittests --output-on-failure

    - name: Install(Linux)
      if: runner.os == 'Linux'
      run: |
        DESTDIR=${{ matrix.config.packageName}} cmake --install build --strip
        sudo cmake --install build --strip

    - name: Install (Others)
      if: runner.os != 'Linux'
      run: cmake --install build --strip

    - name: Prepare Deploy (Unix)
      if: runner.os != 'Windows'
      run: |
        mkdir ff7tk
        cp -r ${{matrix.config.packageName}}/* ff7tk/
        mv COPYING.TXT ${{matrix.config.packageName}}/
        rm -rf ff7tk/usr/bin

    - name: Deployment (Linux)
      if: runner.os == 'Linux'
      run: |
       wget -qc "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
       wget -qc "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
       chmod a+x linuxdeploy*.AppImage
       rm -rf ff7tk/usr/share/applications ff7tk/usr/share/pixmaps
       export VERSION=continuous
       ${{matrix.config.linuxDeployQtPath}}
       ./linuxdeploy-x86_64.AppImage --appdir=widgetGallery --plugin=qt --output appimage \
           -e ${{matrix.config.packageName}}/usr/bin/ff7tkWidgetGallery \
           -d ${{matrix.config.packageName}}/usr/share/applications/ff7tkWidgetGallery.desktop \
           -i ${{matrix.config.packageName}}/usr/share/pixmaps/ff7tkWidgetGallery.png
       export QML_SOURCES_PATHS=ff7tkQmlGallery
       ./linuxdeploy-x86_64.AppImage --appdir=qmlGallery --plugin=qt --output appimage \
           -e ${{matrix.config.packageName}}/usr/bin/ff7tkQmlGallery \
           -d ${{matrix.config.packageName}}/usr/share/applications/ff7tkQmlGallery.desktop \
           -i ${{matrix.config.packageName}}/usr/share/pixmaps/ff7tkQmlGallery.png
       mv ff7tk*.AppImage ${{matrix.config.packageName}}/
       mv ff7tk/ ${{matrix.config.packageName}}
       rm -rf ${{matrix.config.packageName}}/usr
       tar -zcvf ${{ matrix.config.releasePackage}} ${{matrix.config.packageName}}

    - name: Deployment (macOS)
      if: runner.os == 'macOS'
      run: |
        mv ff7tk/ ${{matrix.config.packageName}}
        mv ${{matrix.config.packageName}}/bin/ff7tk*.app ${{matrix.config.packageName}}/
        rm -rf ${{matrix.config.packageName}}/bin ${{matrix.config.packageName}}/share ${{matrix.config.packageName}}/lib ${{matrix.config.packageName}}/include ${{matrix.config.packageName}}/share ${{matrix.config.packageName}}/ff7tk/bin
        zip -r -X ${{ matrix.config.releasePackage}} ${{matrix.config.packageName}}

    - name: Prepare Deployment (Windows)
      if: runner.os == 'Windows'
      run: |
        move COPYING.TXT ${{matrix.config.packageName}}\
        copy "C:\zlib\bin\zlib.dll" ${{matrix.config.packageName}}\bin\
        windeployqt --compiler-runtime --release ${{matrix.config.packageName}}\bin\ff7tk.dll
        windeployqt --compiler-runtime --release ${{matrix.config.packageName}}\bin\ff7tkWidgetGallery.exe
        windeployqt --compiler-runtime --release ${{matrix.config.packageName}}\bin\ff7tkQmlGallery.exe
        7z a -tzip ${{ matrix.config.releasePackage}} ${{matrix.config.packageName}} -r

    - name: Deploy Pages
      if: runner.os == 'Linux' && github.ref == 'refs/heads/master' && matrix.config.QT_VERSION == '5.15.2'
      uses: JamesIves/github-pages-deploy-action@4.1.4
      with:
       branch: gh-pages
       folder: docs/doc/html

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ${{ github.workspace }}/${{matrix.config.releasePackage}}

  release_assets:
    name: Release
    needs: main_Build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - name: Download Files
      uses: actions/download-artifact@v2

    - name: Move Files
      run: mv artifact/* ${{github.workspace}}

    - name: Deploy Package
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
       repo_token: "${{ secrets.DEPLOYTOKEN }}"
       automatic_release_tag: "continuous"
       prerelease: false
       title: "Continuous Build"
       files: ${{env.packageGlob}}
